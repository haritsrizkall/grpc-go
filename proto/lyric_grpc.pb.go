// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.12.4
// source: proto/lyric.proto

package pb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// LyricServiceClient is the client API for LyricService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type LyricServiceClient interface {
	AddLyric(ctx context.Context, in *Lyric, opts ...grpc.CallOption) (*Lyric, error)
	GetSongLyrics(ctx context.Context, in *GetSongLyricsRequest, opts ...grpc.CallOption) (LyricService_GetSongLyricsClient, error)
	UpdateLyric(ctx context.Context, in *UpdateLyricRequest, opts ...grpc.CallOption) (*Lyric, error)
}

type lyricServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewLyricServiceClient(cc grpc.ClientConnInterface) LyricServiceClient {
	return &lyricServiceClient{cc}
}

func (c *lyricServiceClient) AddLyric(ctx context.Context, in *Lyric, opts ...grpc.CallOption) (*Lyric, error) {
	out := new(Lyric)
	err := c.cc.Invoke(ctx, "/lyric.LyricService/AddLyric", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *lyricServiceClient) GetSongLyrics(ctx context.Context, in *GetSongLyricsRequest, opts ...grpc.CallOption) (LyricService_GetSongLyricsClient, error) {
	stream, err := c.cc.NewStream(ctx, &LyricService_ServiceDesc.Streams[0], "/lyric.LyricService/GetSongLyrics", opts...)
	if err != nil {
		return nil, err
	}
	x := &lyricServiceGetSongLyricsClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type LyricService_GetSongLyricsClient interface {
	Recv() (*Lyric, error)
	grpc.ClientStream
}

type lyricServiceGetSongLyricsClient struct {
	grpc.ClientStream
}

func (x *lyricServiceGetSongLyricsClient) Recv() (*Lyric, error) {
	m := new(Lyric)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *lyricServiceClient) UpdateLyric(ctx context.Context, in *UpdateLyricRequest, opts ...grpc.CallOption) (*Lyric, error) {
	out := new(Lyric)
	err := c.cc.Invoke(ctx, "/lyric.LyricService/UpdateLyric", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// LyricServiceServer is the server API for LyricService service.
// All implementations must embed UnimplementedLyricServiceServer
// for forward compatibility
type LyricServiceServer interface {
	AddLyric(context.Context, *Lyric) (*Lyric, error)
	GetSongLyrics(*GetSongLyricsRequest, LyricService_GetSongLyricsServer) error
	UpdateLyric(context.Context, *UpdateLyricRequest) (*Lyric, error)
	mustEmbedUnimplementedLyricServiceServer()
}

// UnimplementedLyricServiceServer must be embedded to have forward compatible implementations.
type UnimplementedLyricServiceServer struct {
}

func (UnimplementedLyricServiceServer) AddLyric(context.Context, *Lyric) (*Lyric, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddLyric not implemented")
}
func (UnimplementedLyricServiceServer) GetSongLyrics(*GetSongLyricsRequest, LyricService_GetSongLyricsServer) error {
	return status.Errorf(codes.Unimplemented, "method GetSongLyrics not implemented")
}
func (UnimplementedLyricServiceServer) UpdateLyric(context.Context, *UpdateLyricRequest) (*Lyric, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateLyric not implemented")
}
func (UnimplementedLyricServiceServer) mustEmbedUnimplementedLyricServiceServer() {}

// UnsafeLyricServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to LyricServiceServer will
// result in compilation errors.
type UnsafeLyricServiceServer interface {
	mustEmbedUnimplementedLyricServiceServer()
}

func RegisterLyricServiceServer(s grpc.ServiceRegistrar, srv LyricServiceServer) {
	s.RegisterService(&LyricService_ServiceDesc, srv)
}

func _LyricService_AddLyric_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Lyric)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LyricServiceServer).AddLyric(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/lyric.LyricService/AddLyric",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LyricServiceServer).AddLyric(ctx, req.(*Lyric))
	}
	return interceptor(ctx, in, info, handler)
}

func _LyricService_GetSongLyrics_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(GetSongLyricsRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(LyricServiceServer).GetSongLyrics(m, &lyricServiceGetSongLyricsServer{stream})
}

type LyricService_GetSongLyricsServer interface {
	Send(*Lyric) error
	grpc.ServerStream
}

type lyricServiceGetSongLyricsServer struct {
	grpc.ServerStream
}

func (x *lyricServiceGetSongLyricsServer) Send(m *Lyric) error {
	return x.ServerStream.SendMsg(m)
}

func _LyricService_UpdateLyric_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateLyricRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LyricServiceServer).UpdateLyric(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/lyric.LyricService/UpdateLyric",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LyricServiceServer).UpdateLyric(ctx, req.(*UpdateLyricRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// LyricService_ServiceDesc is the grpc.ServiceDesc for LyricService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var LyricService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "lyric.LyricService",
	HandlerType: (*LyricServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "AddLyric",
			Handler:    _LyricService_AddLyric_Handler,
		},
		{
			MethodName: "UpdateLyric",
			Handler:    _LyricService_UpdateLyric_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "GetSongLyrics",
			Handler:       _LyricService_GetSongLyrics_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "proto/lyric.proto",
}
